name: Build DMD Versions

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # branches:
    #   - main   # Uncomment to build on main branch changes

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          path: dmd
          fetch-depth: 0

      - name: Checkout Phobos repository
        run: git clone https://github.com/dlang/phobos.git phobos # Clones into ./phobos

      # Dependencies may already be installed
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make gcc
          sudo apt-get update && sudo apt-get install -y time
          sudo apt-get install jq
      
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest # This ensures `dmd` and `rdmd` are available
      # - name: Show D compiler versions
      #   run: |
      #     dmd --version
      #     rdmd --version


      - name: Build DMD (Main Branch)
        run: |
          cd dmd
          git checkout master
          rdmd compiler/src/build.d BUILD=debug

      - name: Build Phobos
        run: |
          cd phobos
          make -f posix.mak BUILD=debug


      - name: Run hello.d with DMD (Main Branch)
        run: |
          dmd/generated/linux/debug/64/dmd -run dmd/compiler/performance_test/simple_codes/hello.d

      - name: Test Performance (Main Branch)
        run: |
          for folder in dmd/compiler/performance_test/*/; do
          echo "Running test from $folder"

          for file in "$folder"*.d; do
          echo "Running test on $file"
          # Run the test and append the output to main-time.txt
          /usr/bin/time -v dmd/generated/linux/debug/64/dmd "$file" 2>&1 | tee -a main-time.txt
          done

          for child_folder in "$folder"*/; do
          echo "Running test for $child_folder"
          /usr/bin/time -v dmd/generated/linux/debug/64/dmd "${child_folder}/main.d" 2>&1 | tee -a main-time.txt
          done
          done

      - name: Display main-time.txt
        run: |
          cat main-time.txt

      - name: Add results to mainData-${{ github.event.pull_request.number }}.json
        run: |
          
          INPUT_FILE="main-time.txt"
          OUTPUT_FILE="mainData-${{ github.event.pull_request.number }}.json"

          echo "[" > "$OUTPUT_FILE"
          first=1
          TEST_COUNT=1;

          while read -r line; do
            if [[ "$line" =~ Command\ being\ timed:\ \"dmd/generated/linux/debug/64/dmd\ (.+\.d)\" ]]; then
              testpath=${BASH_REMATCH[1]}

              USER_TIME=$(grep 'User time' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')
              SYSTEM_TIME=$(grep 'System time' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')
              CPU_USE=$(grep 'User time' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')
              MAX_RAM=$(grep 'Maximum resident set size' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')


              if [[ $first -eq 0 ]]; then
                echo "," >> "$OUTPUT_FILE"
              fi
              echo "  {" >> "$OUTPUT_FILE"
              echo "    \"test\": \"$testpath\"," >> "$OUTPUT_FILE"
              echo "    \"userTime\": $USER_TIME," >> "$OUTPUT_FILE"
              echo "    \"sysTime\": $SYSTEM_TIME," >> "$OUTPUT_FILE"
              echo "    \"cpuUse\": \"${CPU_USE}\"," >> "$OUTPUT_FILE"
              echo "    \"maxRam\": $MAX_RAM" >> "$OUTPUT_FILE"
              echo "  }" >> "$OUTPUT_FILE"
              TEST_COUNT=$((TEST_COUNT + 1))

              first=0
            fi
          done < "$INPUT_FILE"

          echo "" >> "$OUTPUT_FILE"
          echo "]" >> "$OUTPUT_FILE"
      
      - name: print mainData-${{ github.event.pull_request.number }}.json
        run: |
          cat mainData-${{ github.event.pull_request.number }}.json

      # - name: Commit and Push mainData-${{ github.event.pull_request.number }}.json
      #   run: |
      #     cd dmd
      #     git config --global user.name "GitHub Actions"
      #     git config --global user.email "actions@github.com"
      #     git add data/mainData-${{ github.event.pull_request.number }}.json
      #     git commit -m "Update main performance data for PR #${{ github.event.pull_request.number }}"
      #     git push


      - name: Build DMD (PR Branch)
        run: |
          cd dmd
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-branch
          git checkout pr-branch
          rdmd compiler/src/build.d BUILD=debug
      
      - name: Run hello.d with DMD (PR Branch)
        run: |
          cd dmd
          ./generated/linux/debug/64/dmd -run ./compiler/performance_test/simple_codes/hello.d


      - name: Test Performance (PR Branch)
        run: |
          for folder in dmd/compiler/performance_test/*/; do
          echo "Running test from $folder"

          for file in "$folder"*.d; do
          echo "Running test on $file"
          # Run the test and append the output to pr-time.txt
          /usr/bin/time -v dmd/generated/linux/debug/64/dmd "$file" 2>&1 | tee -a pr-time.txt
          done
          
          # For Multi-file tests.
          # Folder must contain a main.d file to run the test
          for child_folder in "$folder"*/; do
          echo "Running test for $child_folder"
          /usr/bin/time -v dmd/generated/linux/debug/64/dmd "${child_folder}/main.d" 2>&1 | tee -a pr-time.txt
          done
          done

      - name: Display pr-time.txt
        run: |
          cat pr-time.txt


      - name: Add results to prData-${{ github.event.pull_request.number }}.json
        run: |
          INPUT_FILE="pr-time.txt"
          OUTPUT_FILE="prData-${{ github.event.pull_request.number }}.json"

          echo "[" > "$OUTPUT_FILE"
          first=1
          TEST_COUNT=1;

          while read -r line; do
            if [[ "$line" =~ Command\ being\ timed:\ \"dmd/generated/linux/debug/64/dmd\ (.+\.d)\" ]]; then
              testpath=${BASH_REMATCH[1]}

              USER_TIME=$(grep 'User time' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')
              SYSTEM_TIME=$(grep 'System time' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')
              CPU_USE=$(grep 'User time' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')
              MAX_RAM=$(grep 'Maximum resident set size' "$INPUT_FILE" | sed -n "${TEST_COUNT}p" | awk '{print $NF}')


              if [[ $first -eq 0 ]]; then
                echo "," >> "$OUTPUT_FILE"
              fi
              echo "  {" >> "$OUTPUT_FILE"
              echo "    \"test\": \"$testpath\"," >> "$OUTPUT_FILE"
              echo "    \"userTime\": $USER_TIME," >> "$OUTPUT_FILE"
              echo "    \"sysTime\": $SYSTEM_TIME," >> "$OUTPUT_FILE"
              echo "    \"cpuUse\": \"${CPU_USE}\"," >> "$OUTPUT_FILE"
              echo "    \"maxRam\": $MAX_RAM" >> "$OUTPUT_FILE"
              echo "  }" >> "$OUTPUT_FILE"
              TEST_COUNT=$((TEST_COUNT + 1))

              first=0
            fi
          done < "$INPUT_FILE"

          echo "" >> "$OUTPUT_FILE"
          echo "]" >> "$OUTPUT_FILE"

      - name: print prData-${{ github.event.pull_request.number }}.json
        run: |
          cat prData-${{ github.event.pull_request.number }}.json

      - name: Push all data to main branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          cd dmd
          git checkout master
          git pull --rebase

          mv ../mainData-${{ github.event.pull_request.number }}.json data/
          mv ../prData-${{ github.event.pull_request.number }}.json data/


          git add data/
          git commit -m "Update performance data for PR #${{ github.event.pull_request.number }}"
          git push

      - name: Compare Performance Results
        run: |
          #Counting the number of test files
          total_files=0
          for file in dmd/compiler/performance_test/*.d; do
            total_files=$((total_files + 1))
          done

          echo "### Performance Comparison on ${total_files} Test" > comment.md
          echo "" >> comment.md

          #initialize variables
          main_user_time=0
          pr_user_time=0
          user_time_diff=0

          main_sys_time=0
          pr_sys_time=0
          sys_time_diff=0

          main_mem=0
          pr_mem=0
          mem_diff=0
          
          # Extracting values

          main_user_time=$(grep "User time (seconds)" main-time.txt | awk '{sum += $NF} END {print sum}')
          pr_user_time=$(grep "User time (seconds)" pr-time.txt | awk '{sum += $NF} END {print sum}')
          user_time_diff=$(echo "$pr_user_time - $main_user_time" | bc)

          main_sys_time=$(grep "System time (seconds)" main-time.txt | awk '{sum += $NF} END {print sum}')
          pr_sys_time=$(grep "System time (seconds)" pr-time.txt | awk '{sum += $NF} END {print sum}')
          sys_time_diff=$(echo "$pr_sys_time - $main_sys_time" | bc)

          main_mem=$(grep "Maximum resident set size" main-time.txt | awk 'BEGIN {max=0} {if ($NF > max) max = $NF} END {print max}')
          pr_mem=$(grep "Maximum resident set size" pr-time.txt | awk 'BEGIN {max=0} {if ($NF > max) max = $NF} END {print max}')
          mem_diff=$(($pr_mem - $main_mem))

          echo "**Main Branch Execution:**" >> comment.md
          echo "- User time: ${main_user_time}s" >> comment.md
          echo "- System time: ${main_sys_time}s" >> comment.md
          echo "- Max resident memory: ${main_mem} KB" >> comment.md
          echo "" >> comment.md

          echo "**PR Branch Execution:**" >> comment.md
          echo "- User time: ${pr_user_time}s" >> comment.md
          echo "- System time: ${pr_sys_time}s" >> comment.md
          echo "- Max resident memory: ${pr_mem} KB" >> comment.md
          echo "" >> comment.md

          echo "### 🚀 Performance Impact" >> comment.md
          echo "- **User time difference:** ${user_time_diff}s" >> comment.md
          echo "- **System time difference:** ${sys_time_diff}s" >> comment.md
          echo "- **Memory difference:** ${mem_diff} KB" >> comment.md


      - name: Post Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        

      # - name: Upload Build Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: built-dmd
      #     path: |
      #       dmd/dmd-main
      #       dmd/dmd-pr
      
      # - name: build hello.d
      #   run: |
      #     cd dmd
      #     ./dmd-main -run ./compiler/performance_test/hello.d
      #     ./dmd-pr -run ./compiler/performance_test/hello.d
