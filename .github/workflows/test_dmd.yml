name: Build DMD Versions

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # branches:
    #   - main   # Uncomment to build on main branch changes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          path: dmd
          fetch-depth: 0 # Ensures full history for PR checkout

      - name: Checkout Phobos repository
        run: git clone https://github.com/dlang/phobos.git phobos # Clones into ./phobos

# Dependencies may already be installed
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make gcc
          sudo apt-get update && sudo apt-get install -y time
          sudo apt-get install jq
      
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest # This ensures `dmd` and `rdmd` are available
      # - name: Show D compiler versions
      #   run: |
      #     dmd --version
      #     rdmd --version


      - name: Build DMD (Main Branch)
        run: |
          cd dmd
          git checkout master
          rdmd compiler/src/build.d BUILD=debug

      - name: Build Phobos
        run: |
          cd phobos
          make -f posix.mak BUILD=debug


      - name: Run hello.d with DMD (Main Branch)
        run: |
          dmd/generated/linux/debug/64/dmd -run dmd/compiler/performance_test/hello.d

      - name: Test Performance (Main Branch)
        run: |
          for file in dmd/compiler/performance_test/*.d; do
          echo "Running test on $file"
          /usr/bin/time -v dmd/generated/linux/debug/64/dmd "$file" 2>&1 | tee -a main-time.txt
          done
      

      # - name: Add results to mainData.json
      #   run: |
      #     # Extract relevant data
      #     PR_NUMBER=${{ github.event.pull_request.number }}
      #     USER_TIME=$(grep "User time (seconds)" main-time.txt | awk '{print $NF}')
      #     SYSTEM_TIME=$(grep "System time (seconds)" main-time.txt | awk '{print $NF}')
      #     CPU_USAGE=$(grep "Percent of CPU this job got" main-time.txt | awk '{print $NF}')
      #     MAX_MEMORY=$(grep "Maximum resident set size (kbytes)" main-time.txt | awk '{print $NF}')
      #     PAGE_SIZE=$(grep "Page size (bytes)" main-time.txt | awk '{print $NF}')

      #     #Append to JSON
      #     [ ! -s dmd/data/mainData.json ] && echo "[]" > dmd/data/mainData.json
      #     NEW_ENTRY=$(jq -n --arg pr "$PR_NUMBER" \
      #           --arg user "$USER_TIME" \
      #           --arg system "$SYSTEM_TIME" \
      #           --arg cpu "$CPU_USAGE" \
      #           --arg mem "$MAX_MEMORY" \
      #           --arg page "$PAGE_SIZE" \
      #           '{pr: $pr, user_time: $user, system_time: $system, cpu_usage: $cpu, max_memory: $mem, page_size: $page}')
      #     jq ". += [$NEW_ENTRY]" dmd/data/mainData.json > temp.json && mv temp.json dmd/data/mainData.json
      
      # # - name: print mainData.json
      # #   run: |
      # #     cat dmd/data/mainData.json

      # - name: Commit and Push mainData.json
      #   run: |
      #     cd dmd
      #     git config --global user.name "GitHub Actions"
      #     git config --global user.email "actions@github.com"
      #     git add data/mainData.json
      #     git commit -m "Update performance data for PR #${{ github.event.pull_request.number }}"
      #     git push


      - name: Build DMD (PR Branch)
        run: |
          cd dmd
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-branch
          git checkout pr-branch
          rdmd compiler/src/build.d BUILD=debug
      
      - name: Run hello.d with DMD (PR Branch)
        run: |
          cd dmd
          ./generated/linux/debug/64/dmd -run ./compiler/performance_test/hello.d

      # - name: Test Performance (PR Branch)
        # run: |
        #   /usr/bin/time -v dmd/generated/linux/debug/64/dmd dmd/compiler/performance_test/test_small.d 2>&1 | tee pr-time.txt

      - name: Test Performance (PR Branch)
        run: |
          for file in dmd/compiler/performance_test/*.d; do
            echo "Running test on $file"
            /usr/bin/time -v dmd/generated/linux/debug/64/dmd "$file" 2>&1 | tee -a pr-time.txt
          done


      # - name: Add results to prData.json
      #   run: |
      #     # #Change Branch
      #     # cd dmd
      #     # git checkout master
      #     # cd ../

      #     # Extract relevant data
      #     PR_NUMBER=${{ github.event.pull_request.number }}
      #     USER_TIME=$(grep "User time (seconds)" pr-time.txt | awk '{print $NF}')
      #     SYSTEM_TIME=$(grep "System time (seconds)" pr-time.txt | awk '{print $NF}')
      #     CPU_USAGE=$(grep "Percent of CPU this job got" pr-time.txt | awk '{print $NF}')
      #     MAX_MEMORY=$(grep "Maximum resident set size (kbytes)" pr-time.txt | awk '{print $NF}')
      #     PAGE_SIZE=$(grep "Page size (bytes)" pr-time.txt | awk '{print $NF}')

      #     #Append to JSON
      #     [ ! -s dmd/data/prData.json ] && echo "[]" > dmd/data/prData.json
      #     NEW_ENTRY=$(jq -n --arg pr "$PR_NUMBER" \
      #           --arg user "$USER_TIME" \
      #           --arg system "$SYSTEM_TIME" \
      #           --arg cpu "$CPU_USAGE" \
      #           --arg mem "$MAX_MEMORY" \
      #           --arg page "$PAGE_SIZE" \
      #           '{pr: $pr, user_time: $user, system_time: $system, cpu_usage: $cpu, max_memory: $mem, page_size: $page}')
      #     jq ". += [$NEW_ENTRY]" dmd/data/prData.json > temp.json && mv temp.json dmd/data/prData.json
          
      #   # - name: print mainData.json
      #   #   run: |
      #   #     cat dmd/data/mainData.json
  
      # - name: Commit prData.json to PR-Branch
      #   run: |
      #     cd dmd
      #     git config --global user.name "GitHub Actions"
      #     git config --global user.email "actions@github.com"
      #     git add data/prData.json
      #     git commit -m "Update performance data for PR #${{ github.event.pull_request.number }}"

      # - name: copy and Push prData to main branch
      #   run: |
      #     cd dmd
      #     git checkout master
      #     git checkout pr-branch -- data/prData.json
      #     git add data/prData.json
      #     git commit -m "Update performance data for PR #${{ github.event.pull_request.number }}"
      #     git push

      - name: Compare Performance Results
        run: |
          #Counting the number of test files
          total_files = 0
          for file in dmd/compiler/performance_test/*.d; do
            total_files=$((total_files + 1))
          done

          echo "### Performance Comparison on ${total_files} Test" > comment.md
          echo "" >> comment.md

          #initialize variables
          main_user_time=0
          pr_user_time=0
          user_time_diff=0

          main_sys_time=0
          pr_sys_time=0
          sys_time_diff=0

          main_mem=0
          pr_mem=0
          mem_diff=0
          
          # Extracting values

          main_user_time=$(grep "User time (seconds)" main-time.txt | awk '{sum += $NF} END {print sum}')
          pr_user_time=$(grep "User time (seconds)" pr-time.txt | awk '{sum += $NF} END {print sum}')
          user_time_diff=$(echo "$pr_user_time - $main_user_time" | bc)

          main_sys_time=$(grep "System time (seconds)" main-time.txt | awk '{sum += $NF} END {print sum}')
          pr_sys_time=$(grep "System time (seconds)" pr-time.txt | awk '{sum += $NF} END {print sum}')
          sys_time_diff=$(echo "$pr_sys_time - $main_sys_time" | bc)

          main_mem=$(grep "Maximum resident set size" main-time.txt | awk 'BEGIN {max=0} {if ($NF > max) max = $NF} END {print max}')
          pr_mem=$(grep "Maximum resident set size" pr-time.txt | awk 'BEGIN {max=0} {if ($NF > max) max = $NF} END {print max}')
          mem_diff=$(($pr_mem - $main_mem))

          echo "**Main Branch Execution:**" >> comment.md
          echo "- User time: ${main_user_time}s" >> comment.md
          echo "- System time: ${main_sys_time}s" >> comment.md
          echo "- Max resident memory: ${main_mem} KB" >> comment.md
          echo "" >> comment.md

          echo "**PR Branch Execution:**" >> comment.md
          echo "- User time: ${pr_user_time}s" >> comment.md
          echo "- System time: ${pr_sys_time}s" >> comment.md
          echo "- Max resident memory: ${pr_mem} KB" >> comment.md
          echo "" >> comment.md

          echo "### ðŸš€ Performance Impact" >> comment.md
          echo "- **User time difference:** ${user_time_diff}s" >> comment.md
          echo "- **System time difference:** ${sys_time_diff}s" >> comment.md
          echo "- **Memory difference:** ${mem_diff} KB" >> comment.md


      - name: Post Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        

      # - name: Upload Build Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: built-dmd
      #     path: |
      #       dmd/dmd-main
      #       dmd/dmd-pr
      
      # - name: build hello.d
      #   run: |
      #     cd dmd
      #     ./dmd-main -run ./compiler/performance_test/hello.d
      #     ./dmd-pr -run ./compiler/performance_test/hello.d
